{
	"info": {
		"_postman_id": "b34cdec7-6129-4fe5-b355-b41ab9ecd416",
		"name": "✅ Assignment #3",
		"description": "## Instructions for Assignment #3\n\n1. **Get the challenge:** Fork the parent collection to your own public workspace.\n2. **Read the instructions:** You will find the tasks you need to complete below.\n3. **Verify your solution:** Select the second folder `Check your solution` and follow the instructions in the documentation to validate your solution.\n    \n\n## Tasks\n\nAll of the following tasts refer to the request \"Get an order by ID\".\n\n### Task 1\n\nWrite an assertion to verify that the response is in JSON format.\n\n### Task 2\n\nWrite a test with two assertions to verify the following:\n\n- The existence of the property \"id\" in the response.\n- The value of the \"id\" property matches the regular expression pattern: `^[A-Z0-9]{9}$`.\n    \n\n### Task 3\n\nWrite a test with two assertions to verify the following:\n\n- The existence of the property \"products\" in the response.\n- The value of the \"products\" property is an array.\n    \n\n### Task 4\n\nOnce you have established that the tests are working as expected, duplicate request from the collection. Drag the request copy inside the \"Assignment #3\" collection and put them in the \"API requests\" folder. Ensure the name of the request remains the same.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6277585"
	},
	"item": [
		{
			"name": "API requests",
			"item": [
				{
					"name": "Get an order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response;",
									"response = pm.response.json();",
									"console.log(response.products[0])",
									"",
									"pm.test('resoponse is json', function(){",
									"   pm.response.to.be.json;",
									"});",
									"",
									"pm.test('check id format', function(){",
									"   pm.expect(response).to.have.property('id').to.match(/^[A-Z0-9]{9}$/);",
									"    //matchs alphabetes, numberes and symbol",
									"});",
									"",
									"",
									"",
									"pm.test('check for products', function(){",
									"   pm.expect(response).to.have.property('products').to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "The requested order",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		},
		{
			"name": "Check your solution",
			"item": [
				{
					"name": "Verify your work",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let collection = pm.response.json().collection",
									"",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection.\", () => {",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct collection returned\", () => {",
									"    pm.expect(collection.info.name).contains(\"Assignment #3\")",
									"});",
									"",
									"pm.test(\"API key secure\", () => {",
									"    let apiKey = collection.variable.find(item => { return item.key === \"postman_api_key\"});",
									"    pm.expect(apiKey.value, 'API key visible under Initial value').does.not.include(\"PMAK\");",
									"});",
									"",
									"let folder = collection.item.find(fol => {return fol.name === \"API requests\"});",
									"",
									"pm.test(\"Task 1: Response is JSON.\", () => {",
									"    let subFolder;",
									"",
									"    request = folder.item.find(r => { return r.name === \"Get an order by ID\"});",
									"    pm.expect(request).to.be.an('object', 'Request \"Get an order by ID\" not found.');",
									"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');",
									"    let tests = request.event.find(event => event.listen === 'test');",
									"    pm.expect(tests).to.be.an('object', 'The request has no test script.');",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.test\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.response.to.be.json\");",
									"});",
									"",
									"pm.test(\"Task 2: Property `id` exists and has the expected format\", () => {",
									"    let subFolder;",
									"",
									"    request = folder.item.find(r => { return r.name === \"Get an order by ID\"});",
									"    pm.expect(request).to.be.an('object', 'Request \"Get an order by ID\" not found.');",
									"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');",
									"    let tests = request.event.find(event => event.listen === 'test');",
									"    pm.expect(tests).to.be.an('object', 'The request has no test script.');",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.test\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"to.have.property\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"to.match(/^[A-Z0-9]{9}$/)\");",
									"});",
									"",
									"",
									"pm.test(\"Task 3: Property 'products' exists and is an array\", () => {",
									"    let subFolder;",
									"",
									"    request = folder.item.find(r => { return r.name === \"Get an order by ID\"});",
									"    pm.expect(request).to.be.an('object', 'Request \"Get an order by ID\" not found.');",
									"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');",
									"    let tests = request.event.find(event => event.listen === 'test');",
									"    pm.expect(tests).to.be.an('object', 'The request has no test script.');",
									"    pm.expect(tests.script.exec.toString(), 'check script').includes(\"pm.test\");",
									"    pm.expect(tests.script.exec.toString(), 'check script').to.contain.oneOf([`to.have.property('products')`, `to.have.property(\"products\")`]);",
									"    pm.expect(tests.script.exec.toString(), 'check script').to.contain.oneOf([`to.be.an('array')`, `to.be.an(\"array\")`, `to.be.a('array')`, `to.be.a(\"array\")`]);    ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "X-API-Key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{postman_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/:collectionId?apikey={{postman_api_key}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								":collectionId"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{postman_api_key}}"
								}
							],
							"variable": [
								{
									"key": "collectionId",
									"value": "{{collection_uuid}}"
								}
							]
						},
						"description": "It's time to check your work.\n\n1. **Get the collection ID:** Select the collection \"Assignment #3\" in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`. Make sure you're getting the `ID` for the collection, and not this request.\n    \n2. **Update the request URL:** Update the `{{collection_uuid}}` in the request URL with the collection `ID` from the previous step, by updating the Postman collection variable.\n    \n3. **Get your Postman API key**: Select the collection in the left sidebar, and tab over to **Variables** to edit collection variables. You can already see one variable called `postman_api_key`. Get your [Postman API key](https://go.postman.co/settings/me/api-keys), and paste the value under `CURRENT VALUE` (and not `INITIAL VALUE`).> ⚠ DON'T LEAK YOUR SECRETS!  \n    It's very important to add sensitive values like an API key to the `CURRENT VALUE` (and not `INITIAL VALUE`) of your public workspace since initial values can be viewed publicly in a public workspace. Storing sensitive values only in `CURRENT VALUE` keeps your secrets private in a team or public workspace. If you accidentally show your API key, [revoke and regenerate your API key](https://go.postman.co/settings/me/api-keys).  \n    Once you save the changes, Postman can authorize your request as shown under the **Headers** tab of the request.\n4. **Validate your solution**: Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results. ENSURE ALL TESTS PASS.\n    \n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/c/training/38). When all of your tests pass, move on to the next request in this folder."
					},
					"response": [
						{
							"name": "Verify your work",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{postman_api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/collections/:collectionId?apikey={{postman_api_key}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{postman_api_key}}"
										}
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "{{collection_uuid}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 07 May 2025 05:12:29 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "10484"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-frame-options",
									"value": "deny"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "referrer-policy",
									"value": "no-referrer-when-downgrade"
								},
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET,POST,PUT,DELETE"
								},
								{
									"key": "access-control-allow-headers",
									"value": "content-type,x-api-key"
								},
								{
									"key": "access-control-allow-credentials",
									"value": "false"
								},
								{
									"key": "x-ratelimit-limit",
									"value": "300"
								},
								{
									"key": "x-ratelimit-reset",
									"value": "59"
								},
								{
									"key": "x-ratelimit-remaining",
									"value": "299"
								},
								{
									"key": "ratelimit",
									"value": "limit=300, remaining=299, reset=59"
								},
								{
									"key": "ratelimit-policy",
									"value": "300;w=60"
								},
								{
									"key": "ratelimit-limit",
									"value": "300"
								},
								{
									"key": "ratelimit-remaining",
									"value": "299"
								},
								{
									"key": "ratelimit-reset",
									"value": "59"
								},
								{
									"key": "ratelimit-limit-month",
									"value": "10000"
								},
								{
									"key": "ratelimit-remaining-month",
									"value": "9983"
								},
								{
									"key": "x-ratelimit-limit-month",
									"value": "10000"
								},
								{
									"key": "x-ratelimit-remaining-month",
									"value": "9983"
								},
								{
									"key": "last-modified",
									"value": "2025-05-07T05:11:49.000Z"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"body": "{\n    \"collection\": {\n        \"info\": {\n            \"_postman_id\": \"b34cdec7-6129-4fe5-b355-b41ab9ecd416\",\n            \"name\": \"✅ Assignment #3\",\n            \"description\": \"## Instructions for Assignment #3\\n\\n1. **Get the challenge:** Fork the parent collection to your own public workspace.\\n2. **Read the instructions:** You will find the tasks you need to complete below.\\n3. **Verify your solution:** Select the second folder `Check your solution` and follow the instructions in the documentation to validate your solution.\\n    \\n\\n## Tasks\\n\\nAll of the following tasts refer to the request \\\"Get an order by ID\\\".\\n\\n### Task 1\\n\\nWrite an assertion to verify that the response is in JSON format.\\n\\n### Task 2\\n\\nWrite a test with two assertions to verify the following:\\n\\n- The existence of the property \\\"id\\\" in the response.\\n- The value of the \\\"id\\\" property matches the regular expression pattern: `^[A-Z0-9]{9}$`.\\n    \\n\\n### Task 3\\n\\nWrite a test with two assertions to verify the following:\\n\\n- The existence of the property \\\"products\\\" in the response.\\n- The value of the \\\"products\\\" property is an array.\\n    \\n\\n### Task 4\\n\\nOnce you have established that the tests are working as expected, duplicate request from the collection. Drag the request copy inside the \\\"Assignment #3\\\" collection and put them in the \\\"API requests\\\" folder. Ensure the name of the request remains the same.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\",\n            \"fork\": {\n                \"label\": \"Tabassum Ferdous's fork\",\n                \"createdAt\": \"2023-05-06T18:40:06.000Z\",\n                \"from\": \"2354738-435732eb-1548-44ee-91b4-df93e26d5cfe\"\n            },\n            \"updatedAt\": \"2025-05-07T05:11:49.000Z\",\n            \"createdAt\": \"2025-05-06T18:28:19.000Z\",\n            \"lastUpdatedBy\": \"6277585\",\n            \"uid\": \"6277585-b34cdec7-6129-4fe5-b355-b41ab9ecd416\"\n        },\n        \"item\": [\n            {\n                \"name\": \"API requests\",\n                \"item\": [\n                    {\n                        \"name\": \"Get an order by ID\",\n                        \"event\": [\n                            {\n                                \"listen\": \"test\",\n                                \"script\": {\n                                    \"id\": \"bd87b506-ba7d-49bb-b24d-1fbdb70d72b0\",\n                                    \"exec\": [\n                                        \"let response;\",\n                                        \"response = pm.response.json();\",\n                                        \"console.log(response.products[0])\",\n                                        \"\",\n                                        \"pm.test('resoponse is json', function(){\",\n                                        \"   pm.response.to.be.json;\",\n                                        \"});\",\n                                        \"\",\n                                        \"pm.test('check id format', function(){\",\n                                        \"   pm.expect(response.id).to.match(/[^a-zA-Z0-9\\\\s]/); //matchs alphabetes, numberes and symbol\",\n                                        \"});\",\n                                        \"\",\n                                        \"pm.test('check for products', function(){\",\n                                        \"   pm.expect(response).to.have.property('products'); //check the property\",\n                                        \"   pm.expect(response.products[0]).to.have.property('id');\",\n                                        \"});\",\n                                        \"\"\n                                    ],\n                                    \"type\": \"text/javascript\",\n                                    \"packages\": {}\n                                }\n                            },\n                            {\n                                \"listen\": \"prerequest\",\n                                \"script\": {\n                                    \"id\": \"41bb7954-653c-4ad0-b3dd-edb2e2a49d96\",\n                                    \"exec\": [\n                                        \"\"\n                                    ],\n                                    \"type\": \"text/javascript\",\n                                    \"packages\": {}\n                                }\n                            }\n                        ],\n                        \"id\": \"51b2b17e-c4ca-4d4d-b659-3c073d16dce2\",\n                        \"request\": {\n                            \"method\": \"GET\",\n                            \"header\": [\n                                {\n                                    \"key\": \"Accept\",\n                                    \"value\": \"application/json\"\n                                }\n                            ],\n                            \"url\": {\n                                \"raw\": \"{{baseUrl}}/orders/:orderId\",\n                                \"host\": [\n                                    \"{{baseUrl}}\"\n                                ],\n                                \"path\": [\n                                    \"orders\",\n                                    \":orderId\"\n                                ],\n                                \"variable\": [\n                                    {\n                                        \"id\": \"7509902e-0ea7-4138-a6da-f83787fd8e5b\",\n                                        \"key\": \"orderId\",\n                                        \"value\": \"{{orderId}}\"\n                                    }\n                                ]\n                            }\n                        },\n                        \"response\": [\n                            {\n                                \"id\": \"11b8c242-187d-43d1-b81e-033a048d25e2\",\n                                \"name\": \"The requested order\",\n                                \"originalRequest\": {\n                                    \"method\": \"GET\",\n                                    \"header\": [],\n                                    \"url\": {\n                                        \"raw\": \"{{baseUrl}}/orders/:orderId\",\n                                        \"host\": [\n                                            \"{{baseUrl}}\"\n                                        ],\n                                        \"path\": [\n                                            \"orders\",\n                                            \":orderId\"\n                                        ],\n                                        \"variable\": [\n                                            {\n                                                \"key\": \"orderId\"\n                                            }\n                                        ]\n                                    }\n                                },\n                                \"status\": \"OK\",\n                                \"code\": 200,\n                                \"_postman_previewlanguage\": \"json\",\n                                \"header\": [\n                                    {\n                                        \"key\": \"Content-Type\",\n                                        \"value\": \"application/json\"\n                                    }\n                                ],\n                                \"cookie\": [],\n                                \"responseTime\": null,\n                                \"body\": \"{}\",\n                                \"uid\": \"6277585-11b8c242-187d-43d1-b81e-033a048d25e2\"\n                            }\n                        ],\n                        \"uid\": \"6277585-51b2b17e-c4ca-4d4d-b659-3c073d16dce2\"\n                    }\n                ],\n                \"id\": \"3f7a3cff-bd0e-4df1-ad44-5699e0142675\",\n                \"uid\": \"6277585-3f7a3cff-bd0e-4df1-ad44-5699e0142675\"\n            },\n            {\n                \"name\": \"Check your solution\",\n                \"item\": [\n                    {\n                        \"name\": \"Verify your work\",\n                        \"event\": [\n                            {\n                                \"listen\": \"test\",\n                                \"script\": {\n                                    \"id\": \"a17c8640-d0ab-4150-a5c9-8a3960aa3d22\",\n                                    \"exec\": [\n                                        \"let collection = pm.response.json().collection\",\n                                        \"\",\n                                        \"pm.test(\\\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection.\\\", () => {\",\n                                        \"});\",\n                                        \"\",\n                                        \"pm.test(\\\"Status code is 200\\\", () => {\",\n                                        \"    pm.response.to.have.status(200);\",\n                                        \"});\",\n                                        \"\",\n                                        \"pm.test(\\\"Correct collection returned\\\", () => {\",\n                                        \"    pm.expect(collection.info.name).contains(\\\"Assignment #3\\\")\",\n                                        \"});\",\n                                        \"\",\n                                        \"pm.test(\\\"API key secure\\\", () => {\",\n                                        \"    let apiKey = collection.variable.find(item => { return item.key === \\\"postman_api_key\\\"});\",\n                                        \"    pm.expect(apiKey.value, 'API key visible under Initial value').does.not.include(\\\"PMAK\\\");\",\n                                        \"});\",\n                                        \"\",\n                                        \"let folder = collection.item.find(fol => {return fol.name === \\\"API requests\\\"});\",\n                                        \"\",\n                                        \"pm.test(\\\"Task 1: Response is JSON.\\\", () => {\",\n                                        \"    let subFolder;\",\n                                        \"\",\n                                        \"    request = folder.item.find(r => { return r.name === \\\"Get an order by ID\\\"});\",\n                                        \"    pm.expect(request).to.be.an('object', 'Request \\\"Get an order by ID\\\" not found.');\",\n                                        \"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');\",\n                                        \"    let tests = request.event.find(event => event.listen === 'test');\",\n                                        \"    pm.expect(tests).to.be.an('object', 'The request has no test script.');\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').includes(\\\"pm.test\\\");\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').includes(\\\"pm.response.to.be.json\\\");\",\n                                        \"});\",\n                                        \"\",\n                                        \"pm.test(\\\"Task 2: Property `id` exists and has the expected format\\\", () => {\",\n                                        \"    let subFolder;\",\n                                        \"\",\n                                        \"    request = folder.item.find(r => { return r.name === \\\"Get an order by ID\\\"});\",\n                                        \"    pm.expect(request).to.be.an('object', 'Request \\\"Get an order by ID\\\" not found.');\",\n                                        \"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');\",\n                                        \"    let tests = request.event.find(event => event.listen === 'test');\",\n                                        \"    pm.expect(tests).to.be.an('object', 'The request has no test script.');\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').includes(\\\"pm.test\\\");\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').includes(\\\"to.have.property\\\");\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').includes(\\\"to.match(/^[A-Z0-9]{9}$/)\\\");\",\n                                        \"});\",\n                                        \"\",\n                                        \"\",\n                                        \"pm.test(\\\"Task 3: Property 'products' exists and is an array\\\", () => {\",\n                                        \"    let subFolder;\",\n                                        \"\",\n                                        \"    request = folder.item.find(r => { return r.name === \\\"Get an order by ID\\\"});\",\n                                        \"    pm.expect(request).to.be.an('object', 'Request \\\"Get an order by ID\\\" not found.');\",\n                                        \"    pm.expect(request.event).to.be.an('array', 'The request has no scripts');\",\n                                        \"    let tests = request.event.find(event => event.listen === 'test');\",\n                                        \"    pm.expect(tests).to.be.an('object', 'The request has no test script.');\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').includes(\\\"pm.test\\\");\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').to.contain.oneOf([`to.have.property('products')`, `to.have.property(\\\"products\\\")`]);\",\n                                        \"    pm.expect(tests.script.exec.toString(), 'check script').to.contain.oneOf([`to.be.an('array')`, `to.be.an(\\\"array\\\")`, `to.be.a('array')`, `to.be.a(\\\"array\\\")`]);    \",\n                                        \"});\",\n                                        \"\"\n                                    ],\n                                    \"type\": \"text/javascript\",\n                                    \"packages\": {}\n                                }\n                            },\n                            {\n                                \"listen\": \"prerequest\",\n                                \"script\": {\n                                    \"id\": \"396410c1-9454-4073-822e-b125764ebfde\",\n                                    \"exec\": [\n                                        \"\"\n                                    ],\n                                    \"type\": \"text/javascript\",\n                                    \"packages\": {}\n                                }\n                            }\n                        ],\n                        \"id\": \"9c458b10-42f8-4e7d-903e-cfa0ee0d246f\",\n                        \"protocolProfileBehavior\": {\n                            \"disableBodyPruning\": true\n                        },\n                        \"request\": {\n                            \"auth\": {\n                                \"type\": \"apikey\",\n                                \"apikey\": [\n                                    {\n                                        \"key\": \"value\",\n                                        \"value\": \"{{apikey}}\",\n                                        \"type\": \"string\"\n                                    },\n                                    {\n                                        \"key\": \"key\",\n                                        \"value\": \"X-API-Key\",\n                                        \"type\": \"string\"\n                                    },\n                                    {\n                                        \"key\": \"in\",\n                                        \"value\": \"header\",\n                                        \"type\": \"string\"\n                                    }\n                                ]\n                            },\n                            \"method\": \"GET\",\n                            \"header\": [\n                                {\n                                    \"key\": \"x-api-key\",\n                                    \"value\": \"{{postman_api_key}}\",\n                                    \"type\": \"text\"\n                                }\n                            ],\n                            \"url\": {\n                                \"raw\": \"https://api.getpostman.com/collections/:collectionId?apikey={{postman_api_key}}\",\n                                \"protocol\": \"https\",\n                                \"host\": [\n                                    \"api\",\n                                    \"getpostman\",\n                                    \"com\"\n                                ],\n                                \"path\": [\n                                    \"collections\",\n                                    \":collectionId\"\n                                ],\n                                \"query\": [\n                                    {\n                                        \"key\": \"apikey\",\n                                        \"value\": \"{{postman_api_key}}\"\n                                    }\n                                ],\n                                \"variable\": [\n                                    {\n                                        \"key\": \"collectionId\",\n                                        \"value\": \"{{collection_uuid}}\"\n                                    }\n                                ]\n                            },\n                            \"description\": \"It's time to check your work.\\n\\n1. **Get the collection ID:** Select the collection \\\"Assignment #3\\\" in the sidebar. Then in the context bar to the right, select the `Info` icon and copy the collection `ID`. Make sure you're getting the `ID` for the collection, and not this request.\\n    \\n2. **Update the request URL:** Update the `{{collection_uuid}}` in the request URL with the collection `ID` from the previous step, by updating the Postman collection variable.\\n    \\n3. **Get your Postman API key**: Select the collection in the left sidebar, and tab over to **Variables** to edit collection variables. You can already see one variable called `postman_api_key`. Get your [Postman API key](https://go.postman.co/settings/me/api-keys), and paste the value under `CURRENT VALUE` (and not `INITIAL VALUE`).> ⚠ DON'T LEAK YOUR SECRETS!  \\n    It's very important to add sensitive values like an API key to the `CURRENT VALUE` (and not `INITIAL VALUE`) of your public workspace since initial values can be viewed publicly in a public workspace. Storing sensitive values only in `CURRENT VALUE` keeps your secrets private in a team or public workspace. If you accidentally show your API key, [revoke and regenerate your API key](https://go.postman.co/settings/me/api-keys).  \\n    Once you save the changes, Postman can authorize your request as shown under the **Headers** tab of the request.\\n4. **Validate your solution**: Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results. ENSURE ALL TESTS PASS.\\n    \\n\\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/c/training/38). When all of your tests pass, move on to the next request in this folder.\"\n                        },\n                        \"response\": [],\n                        \"uid\": \"6277585-9c458b10-42f8-4e7d-903e-cfa0ee0d246f\"\n                    }\n                ],\n                \"id\": \"1f93be3b-bece-4d28-bb1b-994f8fecaa6e\",\n                \"description\": \"Open the request \\\"Verify your work\\\" and follow the instructions in the request documentation.\",\n                \"uid\": \"6277585-1f93be3b-bece-4d28-bb1b-994f8fecaa6e\"\n            }\n        ],\n        \"auth\": {\n            \"type\": \"apikey\",\n            \"apikey\": [\n                {\n                    \"key\": \"key\",\n                    \"value\": \"x-api-key\",\n                    \"type\": \"string\"\n                },\n                {\n                    \"key\": \"value\",\n                    \"value\": \"{{apikey}}\",\n                    \"type\": \"string\"\n                }\n            ]\n        },\n        \"event\": [\n            {\n                \"listen\": \"prerequest\",\n                \"script\": {\n                    \"id\": \"c1288e5e-950f-4ba8-b44c-e9e289db21f7\",\n                    \"type\": \"text/javascript\",\n                    \"exec\": [\n                        \"\"\n                    ]\n                }\n            },\n            {\n                \"listen\": \"test\",\n                \"script\": {\n                    \"id\": \"716db3d8-6f77-47ae-ac60-898df0f360e4\",\n                    \"type\": \"text/javascript\",\n                    \"exec\": [\n                        \"\"\n                    ]\n                }\n            }\n        ],\n        \"variable\": [\n            {\n                \"key\": \"postman_api_key\",\n                \"value\": \"\",\n                \"type\": \"string\"\n            },\n            {\n                \"key\": \"collection_uuid\",\n                \"value\": \"\",\n                \"type\": \"string\"\n            },\n            {\n                \"key\": \"baseUrl\",\n                \"value\": \"https://valentinos-coffee.herokuapp.com\",\n                \"type\": \"string\"\n            },\n            {\n                \"key\": \"orderId\",\n                \"value\": \"\",\n                \"type\": \"default\"\n            },\n            {\n                \"key\": \"apikey\",\n                \"value\": \"\",\n                \"type\": \"default\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			],
			"description": "Open the request \"Verify your work\" and follow the instructions in the request documentation."
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apikey}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "postman_api_key",
			"value": "",
			"type": "string"
		},
		{
			"key": "collection_uuid",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.herokuapp.com",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "default"
		},
		{
			"key": "apikey",
			"value": "",
			"type": "default"
		}
	]
}