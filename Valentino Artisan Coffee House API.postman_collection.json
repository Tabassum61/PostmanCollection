{
	"info": {
		"_postman_id": "65319bae-8cef-401e-a075-4a710bd15f78",
		"name": "Valentino Artisan Coffee House API",
		"description": "An API for managing orders and products at a coffee place named Valentino's Artisan Coffee House.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6277585"
	},
	"item": [
		{
			"name": "status",
			"item": [
				{
					"name": "Get API status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//function is declared with \"function name\" then within '{}' you can do all the tasks.",
									"function myfunction(dosomething){",
									"    //console.log('before the test')",
									"    dosomething()",
									"    //console.log('after the test')",
									"}",
									"myfunction(function(){",
									"",
									"    //console.log('hello') //print anything in console",
									"})",
									"//In Postman all test starts with pm.test('testname',function(){});--generic form",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);// check the response code using response",
									"    console.log(pm.response.code) ;",
									"    pm.expect(pm.response.code).to.eql(200);// check the response code using expect",
									"});",
									"",
									"pm.test(\"headers\", function(){",
									"    pm.expect(pm.response.headers.get(\"X-Powered-By\")).to.eql('Express');",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Retrieve the current status of the API"
					},
					"response": [
						{
							"name": "API status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\"\n}"
						},
						{
							"name": "Get API status",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1745959720&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sofmarYPYVnZDjiiTf2zF%2BDKM7cJCzFQSTo%2FYXXflaA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1745959720&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sofmarYPYVnZDjiiTf2zF%2BDKM7cJCzFQSTo%2FYXXflaA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "34"
								},
								{
									"key": "Etag",
									"value": "W/\"22-DEaYD5STSrk5Avumn2S2WbiVgSY\""
								},
								{
									"key": "Date",
									"value": "Tue, 29 Apr 2025 20:48:40 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"API is up and running\"\n}"
						}
					]
				}
			],
			"description": "Get the status of the API."
		},
		{
			"name": "products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?page=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "3",
									"description": "The page number to fetch"
								},
								{
									"key": "category",
									"value": "cookie",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3",
									"disabled": true
								}
							]
						},
						"description": "Retrieve a paginated list of products, 10 products per page"
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let response; //declare a variable",
									"pm.test(\"respond body is Json\", function(){",
									"pm.response.to.be.json; // check if response is json type",
									"response = pm.response.json(); //get all info from json in the variable",
									"console.log(response.name); //from variable different values (name/id/other attributes) can be access",
									"console.log(response['product-description']); //print attribute with '-'",
									"});",
									"",
									"//check different json attribute property",
									"pm.test('product is cookie', function(){",
									"    pm.expect(response.id).to.eqls(parseInt(pm.collectionVariables.get('productId1')));",
									"    pm.expect(response).to.have.property('name');",
									"    pm.expect(response.name).to.be.a('string');",
									"    pm.expect(response.category).to.eqls('cookie');",
									"    pm.expect(response.isAvailable).to.be.true;",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId1}}"
								}
							]
						},
						"description": "Retrieve a single product by specifying the product ID."
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "clients",
			"item": [
				{
					"name": "Register a new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"pm.test('set token as APIkey', function(){",
									"    // before test, response attribute need to save into a variable 'apikey'",
									"    pm.collectionVariables.set('apiKey',response.token); ",
									"    //using 'orderId' variable id number in json can be checked",
									"    pm.expect(response.token).to.eqls(pm.collectionVariables.get('apiKey'))",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Register a new API client by providing an email address"
					},
					"response": [
						{
							"name": "Client registered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"value\": \"reference #/components/schemas/ApiClient not found in the OpenAPI spec\"\n}"
						},
						{
							"name": "Register a new client",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1745957162&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8fKQpeVBmJnUMgBUamG7RY6eLCrdFDP%2FPdurh6RkXIs%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1745957162&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8fKQpeVBmJnUMgBUamG7RY6eLCrdFDP%2FPdurh6RkXIs%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "52"
								},
								{
									"key": "Etag",
									"value": "W/\"34-+Kn65X7soKhzJD1NHHTRdjo8tro\""
								},
								{
									"key": "Date",
									"value": "Tue, 29 Apr 2025 20:06:02 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"66ad9e21c867ef23a17edede5aaa514277753856\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//This is very important script. It shows, how to store API created name as a collection variable.",
									"//variable gets the order id and set it as collection variable to make the API testing dynamic",
									"const response1 = pm.response.json(); // before test need to save response attribute into a variable",
									"pm.test('check order Id', function(){",
									"    // before test need to save response attribute into a variable 'orderId'",
									"    pm.collectionVariables.set('orderId',response1.id); ",
									"    //using 'orderId' variable id number in json can be checked",
									"    pm.expect(response1.id).to.eqls(pm.collectionVariables.get('orderId'))",
									"}); ",
									"//check response has the same customer name created by new client API",
									"let response;",
									"response = pm.response.json(); // before test need to save response attribute into a variable 'response'",
									"pm.test('customer Name', function(){",
									"    //using 'response' variable all the values in json can be checked",
									"    pm.expect(response.customerName).to.eqls(pm.collectionVariables.get('customerName')); ",
									"});",
									"",
									"pm.test('check order Id format', function(){",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9}$/); ",
									"});",
									"",
									"const orderId = pm.response.json();",
									"console.log(orderId.id);",
									"pm.collectionVariables.set('orderId',orderId.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//'customerName' contains name created by this API",
									"pm.collectionVariables.set('customerName',pm.variables.replaceIn('{{$randomFullName}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"id\": {{productId1}},\n      \"quantity\": 1\n    },\n    {\n      \"id\": {{productId2}},\n      \"quantity\": 3\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Place a new order by providing customer details and ordered products"
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"valid schema test\", function(){",
									"    const schema ={ ",
									"        typeof: Object,",
									"        properties: {",
									"            id:  { typeof: 'String'},",
									"            created:  { typeof: 'null', format: 'date-time'},",
									"            customerName:  { typeof: 'String'}",
									"            },",
									"            required:[ 'id', 'created','customerName'],",
									"            additionalProperties: false",
									"        };",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": [
						{
							"name": "Get all orders",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1746763351&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8Qopml%2BNfY9yU7T0pKVWb6iTt19PuCJp38TCLMy1nzQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1746763351&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8Qopml%2BNfY9yU7T0pKVWb6iTt19PuCJp38TCLMy1nzQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "86"
								},
								{
									"key": "Etag",
									"value": "W/\"56-0+sH8RUtNi0ia8Q2TcYJzsAqnog\""
								},
								{
									"key": "Date",
									"value": "Fri, 09 May 2025 04:02:31 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \n        \"customerName\": \"Justin Kris\",\n        \"item\": \"tea\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get an order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response;",
									"response = pm.response.json();",
									"console.log(response.products[1])",
									"",
									"pm.test('resoponse is json', function(){",
									"   pm.response.to.be.json;",
									"});",
									"",
									"// pm.test('check id format', function(){",
									"//    pm.expect(response.id).to.match(/[^a-zA-Z0-9\\s]/); //matchs alphabetes, numberes and symbol",
									"// });",
									"",
									"pm.test('check for products', function(){",
									"   pm.expect(response).to.have.property('products'); //check the property",
									"   pm.expect(response.products[0]).to.have.property('id');",
									"});",
									"pm.test('check for products', function(){",
									"   pm.expect(response).to.have.property('products').to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "The requested order",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{apiKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "x-api-key",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.glitch.me",
			"disabled": true
		},
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.herokuapp.com",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "e4385cf22a624f4d9a249e6d3d570aabf6e38993",
			"type": "string"
		},
		{
			"key": "customerName",
			"value": "Mrs. Whitney Emmerich",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "Y-ME4CAF7",
			"type": "string"
		},
		{
			"key": "productId1",
			"value": "2002",
			"type": "string"
		},
		{
			"key": "productId2",
			"value": "3007",
			"type": "string"
		},
		{
			"key": "id_1",
			"value": "productId1"
		},
		{
			"key": "id_2",
			"value": "productId2"
		}
	]
}